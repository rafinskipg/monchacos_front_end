{"vid":"108","uid":"1","title":"Drupal e integraci\u00f3n continua","log":"Edited by rafa.","status":"1","comment":"2","promote":"0","sticky":"0","nid":"69","type":"article","language":"und","created":"1349863028","changed":"1350757650","tnid":"0","translate":"0","revision_timestamp":"1350757650","revision_uid":"1","body":{"und":[{"value":"<p><strong>Introducci&oacute;n</strong>:</p>\r\n<p>Este es el documento que acompa&ntilde;a a la ponencia sobre Drupal e integraci&oacute;n continua impartida en la DrupalCamp 2012. Est&aacute; enfocada a la parte t&eacute;cnica de la integraci&oacute;n continua basada en un ejemplo de integraci&oacute;n sobre Jenkins y Phing.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Contenidos</strong>:</p>\r\n<ul>\r\n\t<li>\r\n\t\tDescripci&oacute;n integraci&oacute;n continua</li>\r\n\t<li>\r\n\t\tInspecci&oacute;n continua</li>\r\n\t<li>\r\n\t\tJenkins</li>\r\n\t<li>\r\n\t\tLas herramientas</li>\r\n\t<li>\r\n\t\tDesglose de la plantilla Phing</li>\r\n\t<li>\r\n\t\tConfiguraci&oacute;n</li>\r\n\t<li>\r\n\t\tInstrucciones de instalaci&oacute;n de las herramientas en Linux.</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p><strong>Descripci&oacute;n Integraci&oacute;n continua:</strong></p>\r\n<p>La integraci&oacute;n continua es un proceso iterativo en el que el desarrollador adquiere un compromiso de entrega de c&oacute;digo m&aacute;s frecuentemente, este c&oacute;digo es integrado en la aplicaci&oacute;n mediante un sistema de CI. Posteriormente es testado y analizado, los resultados son enviados al programador para que este conozca el estado de su integraci&oacute;n al momento.</p>\r\n<p>En este proceso, el programador debe atender la respuesta del sistema con una prioridad elevada, es decir, si un c&oacute;digo que commiteamos rompe el funcionamiento de la aplicaci&oacute;n, debemos resolverlo con presteza y commitearlo de nuevo.</p>\r\n<p>Lo que se busca con esto es evitar problemas que puedan afectar al trabajo de los dem&aacute;s desarrolladores que est&eacute;n usando parte de nuestro c&oacute;digo. Adem&aacute;s de ver en una fase temprana como afecta nuestro c&oacute;digo al proyecto.</p>\r\n<p>Citando al libro <em>&quot;Jenkins the definitive guide&quot;</em> podemos decir de la integraci&oacute;n continua, en su definici&oacute;n m&aacute;s b&aacute;sica, implica una herramienta que monitoriza tu sistema de control de versiones para detectar cambios. Cuando un cambio es detectado, esta herramienta inmediatamente compila y testea la aplicaci&oacute;n. Si algo sale mal, la herramienta notifica autom&aacute;ticamente a los desarrolladores para que puedan arreglar ese problema al momento.</p>\r\n<p>Pero la integraci&oacute;n continua puede hacer mucho m&aacute;s que ver que c&oacute;digo est&aacute; fallando, tambi&eacute;n puede revisar la calidad de nuestro c&oacute;digo, detectar puntos donde la refactorizaci&oacute;n es posible, automatizar procesos de despliegue, compilaci&oacute;n, etc.</p>\r\n<p><img alt=\"\" src=\"http://imageshack.us/a/img820/642/projectciarchitecture.jpg\" /></p>\r\n<p>Este diagrama muestra la estructura actual de un sistema de integraci&oacute;n continua. Varios equipos de desarrollo hacen commits a un repositorio de c&oacute;digo fuente y un sistema de itnegraci&oacute;n continua inspecciona y reporta los resultados.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Como implantarla en nuestro entorno de trabajo:</strong></p>\r\n<p>Lo m&aacute;s b&aacute;sico para llevar a nuestra empresa un sistema de integraci&oacute;n continua es un servidor de CI y un set de herramientas que podamos utilizar. En t&eacute;rminos generales lo que necesitar&iacute;amos ser&iacute;a un servidor que se encargue de automatizar los procesos de chequeo del c&oacute;digo, reporte de errores, y despliegues.&nbsp;</p>\r\n<p>Una vez montado el sistema, podr&eacute;is dedicaros completamente al 90% del trabajo restante: hacer que el equipo cambie su forma de programar.</p>\r\n<p>Seg&uacute;n el libro <em>&quot;Jenkins the definitive guide&quot;</em> la integraci&oacute;n continua es un proceso paulatino que debe ir adopt&aacute;ndose en el seno del grupo de trabajo. Las distintas fases que se supone que un equipo de desarrolladores pasar&iacute;a son las siguientes:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<strong>Sin servidor</strong>: Inicialmente el equipo no tiene ning&uacute;n servidor para los despliegues, el producto es compilado localmente en el pc de un miembro de equipo. No hay comits regulares del c&oacute;digo. Cada vez que se libera una versi&oacute;n, alg&uacute;n desarrollador integra manualmente los cambios.</li>\r\n\t<li>\r\n\t\t<strong>Builds nocturnos</strong>: En esta fase, el equipo tiene un servidor para ejecutar las builds cada X tiempo, normalmente por la noche. La build simplemente compila el c&oacute;digo, &nbsp;no hay tests unitarios o no se les da mucha importancia. El equipo hace commits regularmente. Si un commit tiene un conflicto con otro, el servidor notifica a los desarrolladores del error al d&iacute;a siguiente. Los errores detectados se siguen posponiendo.</li>\r\n\t<li>\r\n\t\t<strong>Builds nocturnos y test automaticos b&aacute;sicos</strong>: El equipo empieza a tomarse en serio la Integraci&oacute;n Continua y los tests automatizados. El servidor est&aacute; configurado para ejecutar una build cada vez que se hace un commit, y los desarrolladores pueden ver sus resultados al momento. Adem&aacute;s el servidor ejecuta una serie de tests unitarios y de integraci&oacute;n, los errores son corregidos por el equipo cuanto antes.</li>\r\n\t<li>\r\n\t\t<strong>Dentro de las m&eacute;tricas</strong>: Se usa evaluaci&oacute;n del c&oacute;digo autom&aacute;tica para detectar la calidad del c&oacute;digo, la evaluaci&oacute;n del c&oacute;digo crea a su vez la documentaci&oacute;n de la API.&nbsp;</li>\r\n\t<li>\r\n\t\t<strong>Poni&eacute;ndonos m&aacute;s serios con los tests</strong>: Los beneficios de la integraci&oacute;n continua est&aacute;n estrechamente relacionados con t&eacute;cnicas solidas de testeo. En este punto pr&aacute;cticas como TDD son m&aacute;s comunes, resultando en una mayor confianza en los resultados de las builds autom&aacute;ticas. La aplicaci&oacute;n no es solo compilada y testada, adem&aacute;s, el servidor se encarga de desplegarla autom&aacute;ticamente sobre el servidor de la aplicaci&oacute;n, para poder ejecutar tests m&aacute;s realistas sobre el rendimiento y la aplicaci&oacute;n.</li>\r\n\t<li>\r\n\t\t<strong>Tests de aceptaci&oacute;n autom&aacute;ticos y despliegue m&aacute;s autom&aacute;tico</strong>: TDD de aceptaci&oacute;n es practicado por el equipo, guiando los esfuerzos de desarrollo y proveyendo de un reporte de alto nivel &nbsp;del estado de la aplicaci&oacute;n. Estos test automatizados usan herramientas de Behaviour-Driven Development y Acceptance-Test Driven Development para actuar como herramientas de comunicaci&oacute;n y documentaci&oacute;n, as&iacute; como de testeo. &nbsp;Proporcionando resultados de las pruebas que personas que no sean los desarrolladores pueden entender. La aplicaci&oacute;n es desplegada autom&aacute;ticamente sobre un servidor de test para que las personas del departamento de Calidad puedan testarla. El equipo de desarrollo es capaz de hacer rollbacks de las aplicaciones desplegadas por si algo falla.</li>\r\n\t<li>\r\n\t\t<strong>Despliegue continuo</strong>: La confianza en los test unitarios, de integraci&oacute;n y aceptaci&oacute;n es ahora tan grande que los equipos pueden aplicar el despliegue autom&aacute;tico para enviar directamente los cambios a producci&oacute;n.</li>\r\n</ol>\r\n<p><strong>Las herramientas:</strong></p>\r\n<p>Para poder llevar a cabo los objetivos de este sistema de integraci&oacute;n continua no solo necesitamos un servidor de CI, necesitamos una serie de herramientas que se encarguen de cada una de las cosas que nos interesen.</p>\r\n<p>La propuesta que ejecutaremos se basa en el siguiente stack tecnol&oacute;gico:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<strong>Jenkins</strong>: Servidor de CI que se encargar&aacute; de invocar a Phing</li>\r\n\t<li>\r\n\t\t<strong>PHING</strong>: Proyecto PHP basado en Apache Ant para la ejecuci&oacute;n de tareas, se encargar&aacute; de llamar al resto de herramientas <a href=\"http://www.phing.info/\">http://www.phing.info/</a></li>\r\n\t<li>\r\n\t\t<strong>Drush</strong>: Shell para Drupal, ejecutar&aacute; comandos desde el fichero de build Phing <a href=\"http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt\">http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt</a></li>\r\n\t<li>\r\n\t\t<strong>Simpletest</strong>: Testing para Drupal</li>\r\n\t<li>\r\n\t\t<strong>PHPMD</strong>: Mess Detector. Detecci&oacute;n de c&oacute;digo malicioso (posibles bugs, c&oacute;digo no &oacute;ptimo, expresiones complejas&hellip;) <a href=\"http://phpmd.org/\">http://phpmd.org/</a></li>\r\n\t<li>\r\n\t\t<strong>PHPCPD</strong>: Copy paste detector. Detecci&oacute;n de c&oacute;digo duplicado <a href=\"https://github.com/sebastianbergmann/phpcpd\">https://github.com/sebastianbergmann/phpcpd</a></li>\r\n\t<li>\r\n\t\t<strong>PHPLOC</strong>: An&aacute;lisis de un proyecto PHP, l&iacute;neas de c&oacute;digo, cantidad y tipo de funciones&hellip; <a href=\"https://github.com/sebastianbergmann/phploc\">https://github.com/sebastianbergmann/phploc</a></li>\r\n\t<li>\r\n\t\t<strong>PHPCodesniffer</strong>: An&aacute;lisis de las m&eacute;tricas del c&oacute;digo, al poder indicarle el formato de m&eacute;tricas que acepta, para este proyecto descargamos autom&aacute;ticamente un repositorio que incluye las m&eacute;tricas de Drupal. <a href=\"http://pear.php.net/package/PHP_CodeSniffer/redirected\">http://pear.php.net/package/PHP_CodeSniffer/redirected</a></li>\r\n\t<li>\r\n\t\t<strong>PHPCodeBrowser</strong>: Genera una versi&oacute;n navegable de los problemas detectados por PHPMD o PHPCodesniffer <a href=\"https://github.com/Mayflower/PHP_CodeBrowser\">https://github.com/Mayflower/PHP_CodeBrowser</a></li>\r\n\t<li>\r\n\t\t<strong>PHPDocumentor</strong>: Genera documentaci&oacute;n de un proyecto PHP <a href=\"http://www.phpdoc.org/\">http://www.phpdoc.org/</a></li>\r\n</ul>\r\n<p>Adicionalmente Phing descargar&aacute; y usar&aacute; las siguientes herramientas:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;<a href=\"http://jslint4java.googlecode.com/\">jslint4java</a></strong>: Soporte a la ejecuci&oacute;n de jslint desde l&iacute;nea de commandos.</li>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;<a href=\"https://github.com/mikewest/JSLint\">jslint</a></strong>: Detecta problemas de c&oacute;digo javascript.</li>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;<a href=\"http://csslint.net/\">csslint</a></strong>: Herramienta para la detecci&oacute;n de errors css.</li>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;<a href=\"http://www.mozilla.org/rhino/download.html\">Mozilla Rhino</a></strong>: Una implementaci&oacute;n de javascript en java.</li>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;<a href=\"http://drupal.org/project/coder\">Coder</a></strong>: M&oacute;dulo de Drupal para hacer revisiones de c&oacute;digo.</li>\r\n\t<li>\r\n\t\t<strong>&nbsp; &nbsp;PhpRocco</strong>: Port del generador de de documentaci&oacute;n Rocco</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p><img alt=\"\" src=\"http://imageshack.us/a/img834/628/phing.gif\" /></p>\r\n<p>La ejecuci&oacute;n graficamente: Jenkins invoca a Phing que a su vez invoca a las herramientas encargadas de evaluar el c&oacute;digo, esto genera unos resultados que interpretar&aacute; Jenkins para reportar a los desarrolladores.</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Instalaci&oacute;n de las herramientas.</strong></p>\r\n<p>Puedes encontrar en el pie de este art&iacute;culo los comandos para instalar todo lo que necesitas en tu m&aacute;quina.&nbsp;</p>\r\n<p><strong>Introducci&oacute;n a Jenkins:</strong></p>\r\n<p>Jenkins, originalmente llamado Hudson es una herramienta open source para la integraci&oacute;n continua. Ha destacado entre otras porque es sencilla de usar, la interfaz de usuario es simple e intuitiva y la curva de aprendizaje es baja.</p>\r\n<p>Sin embargo, Jenkins no sacrifica poder o flexibilidad en pos de la sencillez, es muy flexible y f&aacute;cil de adaptar a tus propios prop&oacute;sitos. Tiene a su disposici&oacute;n cientos de plugins para integrarlo con distintos sistemas o herramientas.&nbsp;</p>\r\n<p>Tal como Drupal, Jenkins tiene una comunidad activa que aporta valor a&ntilde;adido al producto.</p>\r\n<p><strong>&iquest;C&oacute;mo funciona Jenkins?</strong></p>\r\n<p>El coraz&oacute;n de Jenkins son los jobs. Un job es un proceso encargado de realizar un set de tareas, como puede ser la compilaci&oacute;n del c&oacute;digo fuente o lanzado de unit test. Tambi&eacute;n puede encargarse de otras tareas como correr los &nbsp;test de integraci&oacute;n, medir el nivel de &ldquo;<em>code coverage</em>&rdquo;, detecci&oacute;n de posibles puntos de refactorizaci&oacute;n, ver si el c&oacute;digo cumple las m&eacute;tricas establecidas...</p>\r\n<p>Lo m&aacute;s com&uacute;n es tener jobs distintos para tareas distintas. Por ejemplo, podr&iacute;amos tener uno para la ejecuci&oacute;n de los test unitarios. En caso de que este job finalizase correctamente lanzar&iacute;amos otro que se encargase de las m&eacute;tricas y la calidad del c&oacute;digo. Y este &uacute;ltimo podr&iacute;a lanzar otro job que se encargase de un despliegue autom&aacute;tico en otra m&aacute;quina o un cambio de rama.</p>\r\n<p>En la p&aacute;gina principal de Jenkins podemos ver una lista de nuestros Jobs:</p>\r\n<p><img alt=\"\" src=\"http://mrupert.files.wordpress.com/2011/06/jenkins-main.jpg\" /></p>\r\n<p>El estado de las &uacute;ltimas ejecuciones se muestra con un s&iacute;mbolo que representa el clima, esta met&aacute;fora simboliza la estabilidad de nuestro job, cuanto m&aacute;s nuboso menos estable es la ejecuci&oacute;n.</p>\r\n<p>Existen varios tipos de jobs, en general el m&aacute;s flexible es el tipo &ldquo;Freestyle software project&rdquo;, aunque en este caso vamos a partir de otro job existente. La informaci&oacute;n sobre c&oacute;mo montar el proyecto, la trataremos en el apartado &ldquo;Configuraci&oacute;n&rdquo;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>La plantilla:</strong></p>\r\n<p>La plantilla Phing se encarga de dirigir la ejecuci&oacute;n del proceso. El trabajo orginal est&aacute; documentado aqu&iacute;: <a href=\"http://reload.github.com/phing-drupal-template/\">http://reload.github.com/phing-drupal-template/</a></p>\r\n<p><strong><em>Informaci&oacute;n &uacute;til para la lectura/edici&oacute;n de la plantilla Phing</em></strong>:</p>\r\n<p><em><strong>Targets:</strong></em></p>\r\n<p>Los targets son las &oacute;rdenes de ejecuci&oacute;n de la plantilla. En este caso se identifican 4 targets principales:</p>\r\n<ol>\r\n\t<li>\r\n\t\tBuild</li>\r\n\t<li>\r\n\t\tVerify</li>\r\n\t<li>\r\n\t\tAnalyze</li>\r\n\t<li>\r\n\t\tDocs</li>\r\n</ol>\r\n<p>Estos targets dependen a su vez de otras ejecuciones, de resolver esas dependencias se encarga Phing.</p>\r\n<p>Por defecto ejecutar&aacute; primero el target &ldquo;Build&rdquo; definido en la declaraci&oacute;n del proyecto y resolver&aacute; sus dependencias:</p>\r\n<pre>\r\n<strong>&lt;project</strong> name=&quot;phing-drupal&quot; default=&quot;build&quot;<strong>&gt;</strong></pre>\r\n<pre>\r\n<strong>&lt;target</strong> name=&quot;build&quot; depends=&quot;init,</pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clean,</pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verify,</pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; analyze&quot; <strong>/&gt;</strong></pre>\r\n<p>&nbsp;</p>\r\n<p>La ejecuci&oacute;n del target &ldquo;docs&rdquo; est&aacute; desactivada por defecto por el alto consumo de memoria que implica.</p>\r\n<p><strong><em>Properties</em></strong>:</p>\r\n<p>Las propiedades definidas en el fichero build.properties (o build.default.properties) se recuperan en la plantilla Phing mediante ${nombre_propiedad}, ejemplo: ${project.sitesdir}&quot;</p>\r\n<p>Tambi&eacute;n se definen en la propia plantilla de build mediante la etiqueta &lt;property&gt;.</p>\r\n<p><em><strong>Patternset</strong></em>:</p>\r\n<p>Un patternset es una regla reutilizable para filtrar archivos. En la plantilla, la ejecuci&oacute;n de las herramientas PHPMD, PHPCPD y PHPLOC es siempre sobre el fileset (o conjunto de ficheros) definido como &ldquo;src.php.custom&rdquo;.</p>\r\n<p><strong>&lt;fileset</strong> id=&quot;src.php.custom&quot; dir=&quot;${project.sitesdir}&quot;<strong>&gt;</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;patternset</strong> refid=&quot;php&quot;<strong>/&gt;</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;patternset</strong> refid=&quot;contrib&quot;<strong>/&gt;</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;patternset</strong> refid=&quot;generated&quot;<strong>/&gt;</strong></p>\r\n<p><strong>&lt;/fileset&gt;</strong></p>\r\n<p>&nbsp;</p>\r\n<p>Este fileset aplica 3 reglas de exclusi&oacute;n/inclusi&oacute;n o patternsets, podemos ver un ejemplo claro, no queremos validar los m&oacute;dulos que tenemos en /sites/contrib porque creemos en su estabilidad, solo queremos validar nuestro c&oacute;digo. As&iacute; que definimos un patternset de exclusi&oacute;n de esos directorios:</p>\r\n<pre>\r\n<strong>&lt;patternset</strong> id=&quot;contrib&quot;<strong>&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;exclude</strong> name=&quot;**/contrib/**/*.*&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;exclude</strong> name=&quot;**/libraries/**/*.*&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n<strong>&lt;/patternset&gt;</strong></pre>\r\n<p>&nbsp;</p>\r\n<p>Es importante notar que el primer patternset que incluimos &ldquo;php&rdquo; es un patternset de inclusi&oacute;n, nos define todos los archivos en los que queremos poner el ojo:</p>\r\n<pre>\r\n<strong>&lt;patternset</strong> id=&quot;php&quot;<strong>&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.php&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.module&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.install&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.inc&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.profile&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&lt;include</strong> name=&quot;**/*.test&quot; <strong>/&gt;</strong></pre>\r\n<pre>\r\n<strong>&lt;/patternset&gt;</strong></pre>\r\n<p>&nbsp;</p>\r\n<p><em><strong>Check Debug:</strong></em></p>\r\n<p>El target=&rdquo;check-debug&rdquo; es el que se encarga de validar que no haya c&oacute;digo de depuraci&oacute;n (var_dump, dsm, console.log&hellip;), en caso de que haya c&oacute;digo de depuraci&oacute;n se finaliza la build. En caso de que no consider&eacute;is esta caracter&iacute;stica algo primordial ya sab&eacute;is donde est&aacute;..</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Configuraci&oacute;n:</strong></p>\r\n<p>A continuaci&oacute;n vamos a reaprovechar el proyecto creado por la compa&ntilde;ia Danesa Reload!: &quot;Jenkins Drupal template&quot;. Podemos encontrar el trabajo original aqu&iacute;:&nbsp;</p>\r\n<p>http://reload.github.com/jenkins-drupal-template/</p>\r\n<p>Los plugins que vamos a necesitar en Jenkins van a ser los siguientes (y sus dependencias):&nbsp;</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>Analysis Collector (para procesar varios archivos de log)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Checkstyle (para procesar los ficheros de log del m&oacute;dulo Drupal Coder o de PHP_Codesniffer)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>DRY (para procesar los archivos de log de phpcpd en formato PMD-CPD)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Phing (para lanzar archivos de build Phing)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Plot (para procesar la salida CSV de phploc)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Static Code Analysis (para procesar varios archivos de log)</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Subversion (Integraci&oacute;n con SVN, podr&iacute;amos sustituirlo por GIT)</p>\r\n\t</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>Configuraci&oacute;n de Job para Jenkins:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>Vamos a /var/lib/jenkins o donde tengamos el directorio home de jenkins</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Hacemos un checkout del fichero config.xml</p>\r\n\t</li>\r\n</ul>\r\n<pre>\r\n<code>cd $JENKINS_HOME/jobs</span></code></pre>\r\n<pre>\r\n<code>git clone git://github.com/reload/jenkins-drupal-template.git drupal-template</span></code></pre>\r\n<pre>\r\n<code>chown -R jenkins:nogroup drupal-template/</span></code></pre>\r\n<ul>\r\n\t<li>\r\n\t\t<p>Lo metemos en una carpteta que crearemos llamada &ldquo;drupal-template&rdquo;</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Le damos permisos a jenkins sobre la carpeta</p>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t\t<p>&nbsp;&ldquo;chown &ndash;R jenkins drupal-template&rdquo;</p>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Recargamos la configuraci&oacute;n de Jenkins para que detecte el proyecto. Desde la administraci&oacute;n de jenkins tenemos un enlace para recargar la informaci&oacute;n</p>\r\n\t</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\t<p>Creamos un nuevo Job en jenkins</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Pulsamos sobre copy existing job y elegimos como target drupal-template</p>\r\n\t</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\t<p>Especificamos los datos de nuestro subversion</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Configuramos la ejecuci&oacute;n en POLL SMC *****</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>Guardamos</p>\r\n\t</li>\r\n</ul>\r\n<p>Configuraci&oacute;n del proyecto Phing:</p>\r\n<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; En la ra&iacute;z del proyecto Drupal copiamos el fichero build.properties, y la carpeta build que contiene el fichero build.xml y build.default.propreties.</p>\r\n<p><img alt=\"\" src=\"http://imageshack.us/a/img22/3525/raizdrupal.png\" /></p>\r\n<p>&nbsp;</p>\r\n<ul>\r\n\t<li>\r\n\t\t&nbsp; &nbsp;Hacemos commit de la aplicaci&oacute;n.</li>\r\n\t<li>\r\n\t\t&nbsp; &nbsp;Disparamos la ejecuci&oacute;n de la build desde Jenkins para hacer una prueba.</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p><strong><em>Build.properties:</em></strong></p>\r\n<p>Fichero donde se almacenan las propiedades de la plantilla Phing.</p>\r\n<p><em><strong>Hook post commit:</strong></em></p>\r\n<p>En este escenario jenkins chequear&aacute; cada minuto el repositorio en busca de cambios. Si&nbsp; nos parece que esperar un minuto para que se ejecute la build es demasiado, podemos hacer que el repositorio notifique a Jenkins del commit mediante el hook_post_commit.</p>\r\n<p><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Subversion+Plugin\">https://wiki.jenkins-ci.org/display/JENKINS/Subversion+Plugin</a></p>\r\n<p>&nbsp;</p>\r\n<p><strong>Requisitos:</strong></p>\r\n<ol>\r\n\t<li>\r\n\t\t&nbsp;Phing</li>\r\n\t<li>\r\n\t\t&nbsp;Sqlite &nbsp;(la versi&oacute;n requerida por drupal 7)</li>\r\n\t<li>\r\n\t\t&nbsp;Git</li>\r\n\t<li>\r\n\t\t&nbsp;Jenkins</li>\r\n\t<li>\r\n\t\t&nbsp;Java</li>\r\n\t<li>\r\n\t\t&nbsp;PEAR</li>\r\n\t<li>\r\n\t\t&nbsp;PHP</li>\r\n\t<li>\r\n\t\t&nbsp;Paquetes pear (Listados al pie)</li>\r\n\t<li>\r\n\t\t&nbsp;Plugins Jenkins (Listados al pie)</li>\r\n\t<li>\r\n\t\t&nbsp;Subversion ( En este caso. Puedes usar solo git si lo deseas)</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n","summary":"","format":"full_html","safe_value":"<p><strong>Introducci\u00f3n</strong>:</p>\n<p>Este es el documento que acompa\u00f1a a la ponencia sobre Drupal e integraci\u00f3n continua impartida en la DrupalCamp 2012. Est\u00e1 enfocada a la parte t\u00e9cnica de la integraci\u00f3n continua basada en un ejemplo de integraci\u00f3n sobre Jenkins y Phing.\u00a0</p>\n<p>\u00a0</p>\n<p><strong>Contenidos</strong>:</p>\n<ul><li>\n\t\tDescripci\u00f3n integraci\u00f3n continua</li>\n<li>\n\t\tInspecci\u00f3n continua</li>\n<li>\n\t\tJenkins</li>\n<li>\n\t\tLas herramientas</li>\n<li>\n\t\tDesglose de la plantilla Phing</li>\n<li>\n\t\tConfiguraci\u00f3n</li>\n<li>\n\t\tInstrucciones de instalaci\u00f3n de las herramientas en Linux.</li>\n</ul><p>\u00a0</p>\n<p><strong>Descripci\u00f3n Integraci\u00f3n continua:</strong></p>\n<p>La integraci\u00f3n continua es un proceso iterativo en el que el desarrollador adquiere un compromiso de entrega de c\u00f3digo m\u00e1s frecuentemente, este c\u00f3digo es integrado en la aplicaci\u00f3n mediante un sistema de CI. Posteriormente es testado y analizado, los resultados son enviados al programador para que este conozca el estado de su integraci\u00f3n al momento.</p>\n<p>En este proceso, el programador debe atender la respuesta del sistema con una prioridad elevada, es decir, si un c\u00f3digo que commiteamos rompe el funcionamiento de la aplicaci\u00f3n, debemos resolverlo con presteza y commitearlo de nuevo.</p>\n<p>Lo que se busca con esto es evitar problemas que puedan afectar al trabajo de los dem\u00e1s desarrolladores que est\u00e9n usando parte de nuestro c\u00f3digo. Adem\u00e1s de ver en una fase temprana como afecta nuestro c\u00f3digo al proyecto.</p>\n<p>Citando al libro <em>\"Jenkins the definitive guide\"</em> podemos decir de la integraci\u00f3n continua, en su definici\u00f3n m\u00e1s b\u00e1sica, implica una herramienta que monitoriza tu sistema de control de versiones para detectar cambios. Cuando un cambio es detectado, esta herramienta inmediatamente compila y testea la aplicaci\u00f3n. Si algo sale mal, la herramienta notifica autom\u00e1ticamente a los desarrolladores para que puedan arreglar ese problema al momento.</p>\n<p>Pero la integraci\u00f3n continua puede hacer mucho m\u00e1s que ver que c\u00f3digo est\u00e1 fallando, tambi\u00e9n puede revisar la calidad de nuestro c\u00f3digo, detectar puntos donde la refactorizaci\u00f3n es posible, automatizar procesos de despliegue, compilaci\u00f3n, etc.</p>\n<p><img alt=\"\" src=\"http://imageshack.us/a/img820/642/projectciarchitecture.jpg\" /></p>\n<p>Este diagrama muestra la estructura actual de un sistema de integraci\u00f3n continua. Varios equipos de desarrollo hacen commits a un repositorio de c\u00f3digo fuente y un sistema de itnegraci\u00f3n continua inspecciona y reporta los resultados.</p>\n<p>\u00a0</p>\n<p><strong>Como implantarla en nuestro entorno de trabajo:</strong></p>\n<p>Lo m\u00e1s b\u00e1sico para llevar a nuestra empresa un sistema de integraci\u00f3n continua es un servidor de CI y un set de herramientas que podamos utilizar. En t\u00e9rminos generales lo que necesitar\u00edamos ser\u00eda un servidor que se encargue de automatizar los procesos de chequeo del c\u00f3digo, reporte de errores, y despliegues.\u00a0</p>\n<p>Una vez montado el sistema, podr\u00e9is dedicaros completamente al 90% del trabajo restante: hacer que el equipo cambie su forma de programar.</p>\n<p>Seg\u00fan el libro <em>\"Jenkins the definitive guide\"</em> la integraci\u00f3n continua es un proceso paulatino que debe ir adopt\u00e1ndose en el seno del grupo de trabajo. Las distintas fases que se supone que un equipo de desarrolladores pasar\u00eda son las siguientes:</p>\n<ol><li>\n\t\t<strong>Sin servidor</strong>: Inicialmente el equipo no tiene ning\u00fan servidor para los despliegues, el producto es compilado localmente en el pc de un miembro de equipo. No hay comits regulares del c\u00f3digo. Cada vez que se libera una versi\u00f3n, alg\u00fan desarrollador integra manualmente los cambios.</li>\n<li>\n\t\t<strong>Builds nocturnos</strong>: En esta fase, el equipo tiene un servidor para ejecutar las builds cada X tiempo, normalmente por la noche. La build simplemente compila el c\u00f3digo, \u00a0no hay tests unitarios o no se les da mucha importancia. El equipo hace commits regularmente. Si un commit tiene un conflicto con otro, el servidor notifica a los desarrolladores del error al d\u00eda siguiente. Los errores detectados se siguen posponiendo.</li>\n<li>\n\t\t<strong>Builds nocturnos y test automaticos b\u00e1sicos</strong>: El equipo empieza a tomarse en serio la Integraci\u00f3n Continua y los tests automatizados. El servidor est\u00e1 configurado para ejecutar una build cada vez que se hace un commit, y los desarrolladores pueden ver sus resultados al momento. Adem\u00e1s el servidor ejecuta una serie de tests unitarios y de integraci\u00f3n, los errores son corregidos por el equipo cuanto antes.</li>\n<li>\n\t\t<strong>Dentro de las m\u00e9tricas</strong>: Se usa evaluaci\u00f3n del c\u00f3digo autom\u00e1tica para detectar la calidad del c\u00f3digo, la evaluaci\u00f3n del c\u00f3digo crea a su vez la documentaci\u00f3n de la API.\u00a0</li>\n<li>\n\t\t<strong>Poni\u00e9ndonos m\u00e1s serios con los tests</strong>: Los beneficios de la integraci\u00f3n continua est\u00e1n estrechamente relacionados con t\u00e9cnicas solidas de testeo. En este punto pr\u00e1cticas como TDD son m\u00e1s comunes, resultando en una mayor confianza en los resultados de las builds autom\u00e1ticas. La aplicaci\u00f3n no es solo compilada y testada, adem\u00e1s, el servidor se encarga de desplegarla autom\u00e1ticamente sobre el servidor de la aplicaci\u00f3n, para poder ejecutar tests m\u00e1s realistas sobre el rendimiento y la aplicaci\u00f3n.</li>\n<li>\n\t\t<strong>Tests de aceptaci\u00f3n autom\u00e1ticos y despliegue m\u00e1s autom\u00e1tico</strong>: TDD de aceptaci\u00f3n es practicado por el equipo, guiando los esfuerzos de desarrollo y proveyendo de un reporte de alto nivel \u00a0del estado de la aplicaci\u00f3n. Estos test automatizados usan herramientas de Behaviour-Driven Development y Acceptance-Test Driven Development para actuar como herramientas de comunicaci\u00f3n y documentaci\u00f3n, as\u00ed como de testeo. \u00a0Proporcionando resultados de las pruebas que personas que no sean los desarrolladores pueden entender. La aplicaci\u00f3n es desplegada autom\u00e1ticamente sobre un servidor de test para que las personas del departamento de Calidad puedan testarla. El equipo de desarrollo es capaz de hacer rollbacks de las aplicaciones desplegadas por si algo falla.</li>\n<li>\n\t\t<strong>Despliegue continuo</strong>: La confianza en los test unitarios, de integraci\u00f3n y aceptaci\u00f3n es ahora tan grande que los equipos pueden aplicar el despliegue autom\u00e1tico para enviar directamente los cambios a producci\u00f3n.</li>\n</ol><p><strong>Las herramientas:</strong></p>\n<p>Para poder llevar a cabo los objetivos de este sistema de integraci\u00f3n continua no solo necesitamos un servidor de CI, necesitamos una serie de herramientas que se encarguen de cada una de las cosas que nos interesen.</p>\n<p>La propuesta que ejecutaremos se basa en el siguiente stack tecnol\u00f3gico:</p>\n<ul><li>\n\t\t<strong>Jenkins</strong>: Servidor de CI que se encargar\u00e1 de invocar a Phing</li>\n<li>\n\t\t<strong>PHING</strong>: Proyecto PHP basado en Apache Ant para la ejecuci\u00f3n de tareas, se encargar\u00e1 de llamar al resto de herramientas <a href=\"http://www.phing.info/\">http://www.phing.info/</a></li>\n<li>\n\t\t<strong>Drush</strong>: Shell para Drupal, ejecutar\u00e1 comandos desde el fichero de build Phing <a href=\"http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt\">http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt</a></li>\n<li>\n\t\t<strong>Simpletest</strong>: Testing para Drupal</li>\n<li>\n\t\t<strong>PHPMD</strong>: Mess Detector. Detecci\u00f3n de c\u00f3digo malicioso (posibles bugs, c\u00f3digo no \u00f3ptimo, expresiones complejas\u2026) <a href=\"http://phpmd.org/\">http://phpmd.org/</a></li>\n<li>\n\t\t<strong>PHPCPD</strong>: Copy paste detector. Detecci\u00f3n de c\u00f3digo duplicado <a href=\"https://github.com/sebastianbergmann/phpcpd\">https://github.com/sebastianbergmann/phpcpd</a></li>\n<li>\n\t\t<strong>PHPLOC</strong>: An\u00e1lisis de un proyecto PHP, l\u00edneas de c\u00f3digo, cantidad y tipo de funciones\u2026 <a href=\"https://github.com/sebastianbergmann/phploc\">https://github.com/sebastianbergmann/phploc</a></li>\n<li>\n\t\t<strong>PHPCodesniffer</strong>: An\u00e1lisis de las m\u00e9tricas del c\u00f3digo, al poder indicarle el formato de m\u00e9tricas que acepta, para este proyecto descargamos autom\u00e1ticamente un repositorio que incluye las m\u00e9tricas de Drupal. <a href=\"http://pear.php.net/package/PHP_CodeSniffer/redirected\">http://pear.php.net/package/PHP_CodeSniffer/redirected</a></li>\n<li>\n\t\t<strong>PHPCodeBrowser</strong>: Genera una versi\u00f3n navegable de los problemas detectados por PHPMD o PHPCodesniffer <a href=\"https://github.com/Mayflower/PHP_CodeBrowser\">https://github.com/Mayflower/PHP_CodeBrowser</a></li>\n<li>\n\t\t<strong>PHPDocumentor</strong>: Genera documentaci\u00f3n de un proyecto PHP <a href=\"http://www.phpdoc.org/\">http://www.phpdoc.org/</a></li>\n</ul><p>Adicionalmente Phing descargar\u00e1 y usar\u00e1 las siguientes herramientas:</p>\n<ul><li>\n\t\t<strong>\u00a0 \u00a0<a href=\"http://jslint4java.googlecode.com/\">jslint4java</a></strong>: Soporte a la ejecuci\u00f3n de jslint desde l\u00ednea de commandos.</li>\n<li>\n\t\t<strong>\u00a0 \u00a0<a href=\"https://github.com/mikewest/JSLint\">jslint</a></strong>: Detecta problemas de c\u00f3digo javascript.</li>\n<li>\n\t\t<strong>\u00a0 \u00a0<a href=\"http://csslint.net/\">csslint</a></strong>: Herramienta para la detecci\u00f3n de errors css.</li>\n<li>\n\t\t<strong>\u00a0 \u00a0<a href=\"http://www.mozilla.org/rhino/download.html\">Mozilla Rhino</a></strong>: Una implementaci\u00f3n de javascript en java.</li>\n<li>\n\t\t<strong>\u00a0 \u00a0<a href=\"http://drupal.org/project/coder\">Coder</a></strong>: M\u00f3dulo de Drupal para hacer revisiones de c\u00f3digo.</li>\n<li>\n\t\t<strong>\u00a0 \u00a0PhpRocco</strong>: Port del generador de de documentaci\u00f3n Rocco</li>\n</ul><p>\u00a0</p>\n<p><img alt=\"\" src=\"http://imageshack.us/a/img834/628/phing.gif\" /></p>\n<p>La ejecuci\u00f3n graficamente: Jenkins invoca a Phing que a su vez invoca a las herramientas encargadas de evaluar el c\u00f3digo, esto genera unos resultados que interpretar\u00e1 Jenkins para reportar a los desarrolladores.</p>\n<p>\u00a0</p>\n<p><strong>Instalaci\u00f3n de las herramientas.</strong></p>\n<p>Puedes encontrar en el pie de este art\u00edculo los comandos para instalar todo lo que necesitas en tu m\u00e1quina.\u00a0</p>\n<p><strong>Introducci\u00f3n a Jenkins:</strong></p>\n<p>Jenkins, originalmente llamado Hudson es una herramienta open source para la integraci\u00f3n continua. Ha destacado entre otras porque es sencilla de usar, la interfaz de usuario es simple e intuitiva y la curva de aprendizaje es baja.</p>\n<p>Sin embargo, Jenkins no sacrifica poder o flexibilidad en pos de la sencillez, es muy flexible y f\u00e1cil de adaptar a tus propios prop\u00f3sitos. Tiene a su disposici\u00f3n cientos de plugins para integrarlo con distintos sistemas o herramientas.\u00a0</p>\n<p>Tal como Drupal, Jenkins tiene una comunidad activa que aporta valor a\u00f1adido al producto.</p>\n<p><strong>\u00bfC\u00f3mo funciona Jenkins?</strong></p>\n<p>El coraz\u00f3n de Jenkins son los jobs. Un job es un proceso encargado de realizar un set de tareas, como puede ser la compilaci\u00f3n del c\u00f3digo fuente o lanzado de unit test. Tambi\u00e9n puede encargarse de otras tareas como correr los \u00a0test de integraci\u00f3n, medir el nivel de \u201c<em>code coverage</em>\u201d, detecci\u00f3n de posibles puntos de refactorizaci\u00f3n, ver si el c\u00f3digo cumple las m\u00e9tricas establecidas...</p>\n<p>Lo m\u00e1s com\u00fan es tener jobs distintos para tareas distintas. Por ejemplo, podr\u00edamos tener uno para la ejecuci\u00f3n de los test unitarios. En caso de que este job finalizase correctamente lanzar\u00edamos otro que se encargase de las m\u00e9tricas y la calidad del c\u00f3digo. Y este \u00faltimo podr\u00eda lanzar otro job que se encargase de un despliegue autom\u00e1tico en otra m\u00e1quina o un cambio de rama.</p>\n<p>En la p\u00e1gina principal de Jenkins podemos ver una lista de nuestros Jobs:</p>\n<p><img alt=\"\" src=\"http://mrupert.files.wordpress.com/2011/06/jenkins-main.jpg\" /></p>\n<p>El estado de las \u00faltimas ejecuciones se muestra con un s\u00edmbolo que representa el clima, esta met\u00e1fora simboliza la estabilidad de nuestro job, cuanto m\u00e1s nuboso menos estable es la ejecuci\u00f3n.</p>\n<p>Existen varios tipos de jobs, en general el m\u00e1s flexible es el tipo \u201cFreestyle software project\u201d, aunque en este caso vamos a partir de otro job existente. La informaci\u00f3n sobre c\u00f3mo montar el proyecto, la trataremos en el apartado \u201cConfiguraci\u00f3n\u201d</p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p><strong>La plantilla:</strong></p>\n<p>La plantilla Phing se encarga de dirigir la ejecuci\u00f3n del proceso. El trabajo orginal est\u00e1 documentado aqu\u00ed: <a href=\"http://reload.github.com/phing-drupal-template/\">http://reload.github.com/phing-drupal-template/</a></p>\n<p><strong><em>Informaci\u00f3n \u00fatil para la lectura/edici\u00f3n de la plantilla Phing</em></strong>:</p>\n<p><em><strong>Targets:</strong></em></p>\n<p>Los targets son las \u00f3rdenes de ejecuci\u00f3n de la plantilla. En este caso se identifican 4 targets principales:</p>\n<ol><li>\n\t\tBuild</li>\n<li>\n\t\tVerify</li>\n<li>\n\t\tAnalyze</li>\n<li>\n\t\tDocs</li>\n</ol><p>Estos targets dependen a su vez de otras ejecuciones, de resolver esas dependencias se encarga Phing.</p>\n<p>Por defecto ejecutar\u00e1 primero el target \u201cBuild\u201d definido en la declaraci\u00f3n del proyecto y resolver\u00e1 sus dependencias:</p>\n<pre>\n<strong>&lt;project</strong> name=\"phing-drupal\" default=\"build\"<strong>&gt;</strong></pre><pre>\n<strong>&lt;target</strong> name=\"build\" depends=\"init,</pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 clean,</pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 verify,</pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 analyze\" <strong>/&gt;</strong></pre><p>\u00a0</p>\n<p>La ejecuci\u00f3n del target \u201cdocs\u201d est\u00e1 desactivada por defecto por el alto consumo de memoria que implica.</p>\n<p><strong><em>Properties</em></strong>:</p>\n<p>Las propiedades definidas en el fichero build.properties (o build.default.properties) se recuperan en la plantilla Phing mediante ${nombre_propiedad}, ejemplo: ${project.sitesdir}\"</p>\n<p>Tambi\u00e9n se definen en la propia plantilla de build mediante la etiqueta &lt;property&gt;.</p>\n<p><em><strong>Patternset</strong></em>:</p>\n<p>Un patternset es una regla reutilizable para filtrar archivos. En la plantilla, la ejecuci\u00f3n de las herramientas PHPMD, PHPCPD y PHPLOC es siempre sobre el fileset (o conjunto de ficheros) definido como \u201csrc.php.custom\u201d.</p>\n<p><strong>&lt;fileset</strong> id=\"src.php.custom\" dir=\"${project.sitesdir}\"<strong>&gt;</strong></p>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;patternset</strong> refid=\"php\"<strong>/&gt;</strong></p>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;patternset</strong> refid=\"contrib\"<strong>/&gt;</strong></p>\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;patternset</strong> refid=\"generated\"<strong>/&gt;</strong></p>\n<p><strong>&lt;/fileset&gt;</strong></p>\n<p>\u00a0</p>\n<p>Este fileset aplica 3 reglas de exclusi\u00f3n/inclusi\u00f3n o patternsets, podemos ver un ejemplo claro, no queremos validar los m\u00f3dulos que tenemos en /sites/contrib porque creemos en su estabilidad, solo queremos validar nuestro c\u00f3digo. As\u00ed que definimos un patternset de exclusi\u00f3n de esos directorios:</p>\n<pre>\n<strong>&lt;patternset</strong> id=\"contrib\"<strong>&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;exclude</strong> name=\"**/contrib/**/*.*\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;exclude</strong> name=\"**/libraries/**/*.*\" <strong>/&gt;</strong></pre><pre>\n<strong>&lt;/patternset&gt;</strong></pre><p>\u00a0</p>\n<p>Es importante notar que el primer patternset que incluimos \u201cphp\u201d es un patternset de inclusi\u00f3n, nos define todos los archivos en los que queremos poner el ojo:</p>\n<pre>\n<strong>&lt;patternset</strong> id=\"php\"<strong>&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.php\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.module\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.install\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.inc\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.profile\" <strong>/&gt;</strong></pre><pre>\n\u00a0\u00a0\u00a0\u00a0\u00a0 <strong>&lt;include</strong> name=\"**/*.test\" <strong>/&gt;</strong></pre><pre>\n<strong>&lt;/patternset&gt;</strong></pre><p>\u00a0</p>\n<p><em><strong>Check Debug:</strong></em></p>\n<p>El target=\u201dcheck-debug\u201d es el que se encarga de validar que no haya c\u00f3digo de depuraci\u00f3n (var_dump, dsm, console.log\u2026), en caso de que haya c\u00f3digo de depuraci\u00f3n se finaliza la build. En caso de que no consider\u00e9is esta caracter\u00edstica algo primordial ya sab\u00e9is donde est\u00e1..</p>\n<p>\u00a0</p>\n<p><strong>Configuraci\u00f3n:</strong></p>\n<p>A continuaci\u00f3n vamos a reaprovechar el proyecto creado por la compa\u00f1ia Danesa Reload!: \"Jenkins Drupal template\". Podemos encontrar el trabajo original aqu\u00ed:\u00a0</p>\n<p><a href=\"http://reload.github.com/jenkins-drupal-template/\">http://reload.github.com/jenkins-drupal-template/</a></p>\n<p>Los plugins que vamos a necesitar en Jenkins van a ser los siguientes (y sus dependencias):\u00a0</p>\n<ul><li>\n<p>Analysis Collector (para procesar varios archivos de log)</p>\n</li>\n<li>\n<p>Checkstyle (para procesar los ficheros de log del m\u00f3dulo Drupal Coder o de PHP_Codesniffer)</p>\n</li>\n<li>\n<p>DRY (para procesar los archivos de log de phpcpd en formato PMD-CPD)</p>\n</li>\n<li>\n<p>Phing (para lanzar archivos de build Phing)</p>\n</li>\n<li>\n<p>Plot (para procesar la salida CSV de phploc)</p>\n</li>\n<li>\n<p>Static Code Analysis (para procesar varios archivos de log)</p>\n</li>\n<li>\n<p>Subversion (Integraci\u00f3n con SVN, podr\u00edamos sustituirlo por GIT)</p>\n</li>\n</ul><p>\u00a0</p>\n<p>Configuraci\u00f3n de Job para Jenkins:</p>\n<ul><li>\n<p>Vamos a /var/lib/jenkins o donde tengamos el directorio home de jenkins</p>\n</li>\n<li>\n<p>Hacemos un checkout del fichero config.xml</p>\n</li>\n</ul><pre>\n<code>cd $JENKINS_HOME/jobs</code></pre><pre>\n<code>git clone git://github.com/reload/jenkins-drupal-template.git drupal-template</code></pre><pre>\n<code>chown -R jenkins:nogroup drupal-template/</code></pre><ul><li>\n<p>Lo metemos en una carpteta que crearemos llamada \u201cdrupal-template\u201d</p>\n</li>\n<li>\n<p>Le damos permisos a jenkins sobre la carpeta</p>\n<ul><li>\n<p>\u00a0\u201cchown \u2013R jenkins drupal-template\u201d</p>\n</li>\n</ul></li>\n<li>\n<p>Recargamos la configuraci\u00f3n de Jenkins para que detecte el proyecto. Desde la administraci\u00f3n de jenkins tenemos un enlace para recargar la informaci\u00f3n</p>\n</li>\n</ul><ul><li>\n<p>Creamos un nuevo Job en jenkins</p>\n</li>\n<li>\n<p>Pulsamos sobre copy existing job y elegimos como target drupal-template</p>\n</li>\n</ul><ul><li>\n<p>Especificamos los datos de nuestro subversion</p>\n</li>\n<li>\n<p>Configuramos la ejecuci\u00f3n en POLL SMC *****</p>\n</li>\n<li>\n<p>Guardamos</p>\n</li>\n</ul><p>Configuraci\u00f3n del proyecto Phing:</p>\n<p>\u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 En la ra\u00edz del proyecto Drupal copiamos el fichero build.properties, y la carpeta build que contiene el fichero build.xml y build.default.propreties.</p>\n<p><img alt=\"\" src=\"http://imageshack.us/a/img22/3525/raizdrupal.png\" /></p>\n<p>\u00a0</p>\n<ul><li>\n\t\t\u00a0 \u00a0Hacemos commit de la aplicaci\u00f3n.</li>\n<li>\n\t\t\u00a0 \u00a0Disparamos la ejecuci\u00f3n de la build desde Jenkins para hacer una prueba.</li>\n</ul><p>\u00a0</p>\n<p><strong><em>Build.properties:</em></strong></p>\n<p>Fichero donde se almacenan las propiedades de la plantilla Phing.</p>\n<p><em><strong>Hook post commit:</strong></em></p>\n<p>En este escenario jenkins chequear\u00e1 cada minuto el repositorio en busca de cambios. Si\u00a0 nos parece que esperar un minuto para que se ejecute la build es demasiado, podemos hacer que el repositorio notifique a Jenkins del commit mediante el hook_post_commit.</p>\n<p><a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Subversion+Plugin\">https://wiki.jenkins-ci.org/display/JENKINS/Subversion+Plugin</a></p>\n<p>\u00a0</p>\n<p><strong>Requisitos:</strong></p>\n<ol><li>\n\t\t\u00a0Phing</li>\n<li>\n\t\t\u00a0Sqlite \u00a0(la versi\u00f3n requerida por drupal 7)</li>\n<li>\n\t\t\u00a0Git</li>\n<li>\n\t\t\u00a0Jenkins</li>\n<li>\n\t\t\u00a0Java</li>\n<li>\n\t\t\u00a0PEAR</li>\n<li>\n\t\t\u00a0PHP</li>\n<li>\n\t\t\u00a0Paquetes pear (Listados al pie)</li>\n<li>\n\t\t\u00a0Plugins Jenkins (Listados al pie)</li>\n<li>\n\t\t\u00a0Subversion ( En este caso. Puedes usar solo git si lo deseas)</li>\n</ol><p>\u00a0</p>\n","safe_summary":""}]},"field_tags":[],"field_image":[],"field_references":[],"rdf_mapping":{"field_image":{"predicates":["og:image","rdfs:seeAlso"],"type":"rel"},"field_tags":{"predicates":["dc:subject"],"type":"rel"},"rdftype":["sioc:Item","foaf:Document"],"title":{"predicates":["dc:title"]},"created":{"predicates":["dc:date","dc:created"],"datatype":"xsd:dateTime","callback":"date_iso8601"},"changed":{"predicates":["dc:modified"],"datatype":"xsd:dateTime","callback":"date_iso8601"},"body":{"predicates":["content:encoded"]},"uid":{"predicates":["sioc:has_creator"],"type":"rel"},"name":{"predicates":["foaf:name"]},"comment_count":{"predicates":["sioc:num_replies"],"datatype":"xsd:integer"},"last_activity":{"predicates":["sioc:last_activity_date"],"datatype":"xsd:dateTime","callback":"date_iso8601"}},"cid":"4058","last_comment_timestamp":"1354536537","last_comment_name":"Cecila","last_comment_uid":"0","comment_count":"1","name":"rafa","picture":"5","data":"a:10:{s:7:\"overlay\";i:1;s:7:\"contact\";i:1;s:16:\"ckeditor_default\";s:1:\"t\";s:20:\"ckeditor_show_toggle\";s:1:\"t\";s:14:\"ckeditor_popup\";s:1:\"f\";s:13:\"ckeditor_skin\";s:4:\"kama\";s:15:\"ckeditor_expand\";s:1:\"t\";s:14:\"ckeditor_width\";s:4:\"100%\";s:13:\"ckeditor_lang\";s:2:\"en\";s:18:\"ckeditor_auto_lang\";s:1:\"t\";}","path":"http://www.monchacos.com/monchacos/content/drupal-e-integraci%C3%B3n-continua","workbench_moderation":{"current":{"hid":"47","vid":"108","nid":"69","from_state":"draft","state":"published","uid":"1","stamp":"1350757650","published":"1","current":1,"title":"Drupal e integraci\u00f3n continua","timestamp":"1350757650"},"published":{"hid":"47","vid":"108","nid":"69","from_state":"draft","state":"published","uid":"1","stamp":"1350757650","published":"1","current":1,"title":"Drupal e integraci\u00f3n continua","timestamp":"1350757650"},"my_revision":{"hid":"47","vid":"108","nid":"69","from_state":"draft","state":"published","uid":"1","stamp":"1350757650","published":"1","current":1,"title":"Drupal e integraci\u00f3n continua","timestamp":"1350757650"}}}
